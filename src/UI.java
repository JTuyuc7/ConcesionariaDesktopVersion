/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import Utils.*;
import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfWriter;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.Objects;

/**
 *
 * @author Jaime Tuyuc
 */
public class UI extends javax.swing.JFrame {

    DefaultTableModel model;

    //* Queries
    Queries qr = new Queries();

    //* Validations
    Validations validations = new Validations();

    //* PDF report
    PdfReport pdfReport = new PdfReport();

    //* Name to save files
    GenerateNamePath generateNamePath = new GenerateNamePath();

    //* Global variables
    float cantidad_total = 0;
    int unidadades_totales = 0;
    int cantidad_producto_to_update = 0;

    String product_code_to_find = "";

    //? Producto a actualizar
    ResultSet product_found = null;
    int user_loggedin_id = 0;

    String desktopPath = System.getProperty("user.home") + File.separator +"Desktop";

    //! Datos de usuario
    String full_user_name = "";
    String product_code_to_update = "";
    String isSuperAdmin = "";

    String id_product_to_generate_invoice = "";


    public UI(int userId) throws SQLException {
        initComponents();
        loadInitialData(userId);
        getUserInfo(userId);
//        getImages();
        saveExtracInsertBtn.setVisible(false);
        cancelExtractInsertbtn.setVisible(false);
    }


    public void getUserInfo(int user_id_from_login) throws SQLException {
        ResultSet user_loggedin_info = qr.userInformation(user_id_from_login);
        if(user_loggedin_info != null){
            while (user_loggedin_info.next()){
                user_loggedin_id = user_loggedin_info.getInt(1);
                full_user_name = user_loggedin_info.getString(2) + " " + user_loggedin_info.getString(3);
                isSuperAdmin = user_loggedin_info.getString(5);
            }
        }
        if(full_user_name.length() > 1){
            user_info_loggedin.setText(full_user_name);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        quantityLabel = new javax.swing.JLabel();
        productQty = new javax.swing.JTextField();
        productName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        productPrice = new javax.swing.JTextField();
        saveExtracInsertBtn = new javax.swing.JButton();
        cancelExtractInsertbtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        extractInventory = new javax.swing.JButton();
        insertInventory = new javax.swing.JButton();
        find_product = new javax.swing.JButton();
        deleteProduct = new javax.swing.JButton();
        generateReport = new javax.swing.JButton();
        find_product1 = new javax.swing.JButton();
        search_product = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableContent = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        totalAmount = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        user_info_loggedin = new javax.swing.JLabel();


        URL logo_image_url = getClass().getResource("./assets/logo.png");
        URL add_image_url = getClass().getResource("./assets/agregar.png");
        URL delete_image_url = getClass().getResource("./assets/deleteIcon.png");
        URL report_image_url = getClass().getResource("./assets/report.png");
        URL insert_image_url = getClass().getResource("./assets/ingreso1.png");
        URL extract_image_url = getClass().getResource("./assets/extraer.png");
        URL search_image_url = getClass().getResource("./assets/buscar.png");
        URL logout_image_url = getClass().getResource("./assets/salir.png");

        assert logo_image_url != null;
        assert extract_image_url != null;
        assert add_image_url != null;
        assert insert_image_url != null;
        assert delete_image_url != null;
        assert report_image_url != null;
        assert logout_image_url != null;
        assert search_image_url != null;
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(151, 7, 240));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(logo_image_url)); // NOI18N
        jLabel1.setText("Drive X port");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        quantityLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        quantityLabel.setText("CANTIDAD PRODUCTO:");

        productQty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productQty.setText("0");
        productQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productQtyActionPerformed(evt);
            }
        });

        productName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("NOMBRE PRODUCTO:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("PRECIO PRODUCTO:");

        productPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productPriceActionPerformed(evt);
            }
        });

        saveExtracInsertBtn.setBackground(new java.awt.Color(13, 110, 253));
        saveExtracInsertBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveExtracInsertBtn.setText("Guardar");
        saveExtracInsertBtn.setToolTipText("Extrae o inserta para habilitar");
        saveExtracInsertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    saveExtracInsertBtnActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        cancelExtractInsertbtn.setForeground(new java.awt.Color(0, 0, 255));
        cancelExtractInsertbtn.setText("Cancelar");
        cancelExtractInsertbtn.setToolTipText("Extrae o inserta para habilitar");
        cancelExtractInsertbtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        cancelExtractInsertbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelExtractInsertbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(quantityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(productQty, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(192, 192, 192)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveExtracInsertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelExtractInsertbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(saveExtracInsertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelExtractInsertbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(quantityLabel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(productQty, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        extractInventory.setBackground(new java.awt.Color(255, 165, 0));
        extractInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        extractInventory.setIcon(new javax.swing.ImageIcon(extract_image_url)); // NOI18N
        extractInventory.setText("EXTRAER");
        extractInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    extractInventoryActionPerformed(evt);
                } catch (SQLException | FileNotFoundException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        insertInventory.setBackground(new java.awt.Color(0, 0, 255));
        insertInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        insertInventory.setForeground(new java.awt.Color(204, 204, 204));
        insertInventory.setIcon(new javax.swing.ImageIcon(insert_image_url)); // NOI18N
        insertInventory.setText("INGRESO");
        insertInventory.setPreferredSize(new java.awt.Dimension(240, 39));
        insertInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    insertInventoryActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        find_product.setBackground(new java.awt.Color(93, 190, 163));
        find_product.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        find_product.setIcon(new javax.swing.ImageIcon(add_image_url)); // NOI18N
        find_product.setText("NUEVO");
        find_product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    find_productActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        deleteProduct.setBackground(new java.awt.Color(255, 0, 0));
        deleteProduct.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteProduct.setIcon(new javax.swing.ImageIcon(delete_image_url)); // NOI18N
        deleteProduct.setText("ELIMINAR");
        deleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    deleteProductActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        generateReport.setBackground(new java.awt.Color(255, 87, 51));
        generateReport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateReport.setIcon(new javax.swing.ImageIcon(report_image_url)); // NOI18N
        generateReport.setText("REPORTE");
        generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportActionPerformed(evt);
            }
        });

        find_product1.setBackground(new java.awt.Color(93, 190, 163));
        find_product1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        find_product1.setIcon(new javax.swing.ImageIcon(logout_image_url)); // NOI18N
        find_product1.setText("SALIR");
        find_product1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    find_product1ActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        search_product.setBackground(new java.awt.Color(153, 255, 153));
        search_product.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        search_product.setIcon(new javax.swing.ImageIcon(search_image_url)); // NOI18N
        search_product.setText("BUSCAR");
        search_product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    search_productActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generateReport, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(extractInventory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(insertInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(deleteProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(find_product1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(search_product, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(find_product, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extractInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(find_product, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_product, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(find_product1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inventario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tableContent.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tableContent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Producto", "Nombre Producto", "Existencia", "Precio Unitario", "Total", "Modificacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableContent.setGridColor(new java.awt.Color(153, 153, 153));
        tableContent.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableContent);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Gran Total");

        totalAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        totalAmount.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalAmount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Bienvenido");

        user_info_loggedin.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(user_info_loggedin, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(user_info_loggedin, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productQtyActionPerformed

    private void productPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productPriceActionPerformed

    private void extractInventoryActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, FileNotFoundException {
        ResultSet tempProductFound = null;
        String tempProductCode = "";
        //* producto
        String product_name = "";
        float unit_price = 0;
        product_code_to_find = JOptionPane.showInputDialog("Ingrese el codigo del producto a extraer.");

        if(product_code_to_find.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor ingrese un codigo a buscar");
            return;
        }

        if(!product_code_to_find.isEmpty()){
//            System.out.println(tempProductCode+ user_loggedin_id);
            tempProductFound = qr.getSingleProductFromDb(product_code_to_find, user_loggedin_id);
        }

        if(tempProductFound != null){
            while (tempProductFound.next()){
                tempProductCode = tempProductFound.getString(1);
                id_product_to_generate_invoice = tempProductFound.getString(1);
                product_code_to_update = tempProductFound.getString(1);
                product_name = tempProductFound.getString(2);
                cantidad_producto_to_update = Integer.parseInt(tempProductFound.getString(3));
                unit_price = Float.parseFloat(tempProductFound.getString(4));
            }
        }

        if(tempProductCode.isEmpty()){
            JOptionPane.showMessageDialog(null, "Producto no encontrado o codigo invalido");
        }else {
            saveExtracInsertBtn.setText("Continuar");
                enableElements(tempProductCode, product_name, unit_price);
                //? Set the text to the original data
                setTextFieldProductQty("");

                disableMenuButtons("CANTIDAD A EXTRAER:");

                showButtonsEdit();

                updateAndExtractFields();
        }
        //TODO: manejar el evento de cancel en JOPane
    }

    //* Enable function
    private void enableElements(String codigo_producto_to_update, String product_name, Float unit_price){
//        productCode.setText(codigo_producto_to_update);
        productName.setText(product_name);
        productPrice.setText(String.valueOf(unit_price));
    }

    private void updateAndExtractFields(){
        //* Enable the quantity
        productQty.setEnabled(true);
        //* Leave read only values
        productName.setEnabled(false);
//        productCode.setEnabled(false);
        productPrice.setEnabled(false);
    }

    //? Disable menu buttons
    private void disableMenuButtons(String msg_toShow){
        find_product.setEnabled(false);
        deleteProduct.setEnabled(false);
        extractInventory.setEnabled(false);
        insertInventory.setEnabled(false);
        deleteProduct.setEnabled(false);
        generateReport.setEnabled(false);
        quantityLabel.setText(msg_toShow);
    }

    //*Disable function
    private void disableElements(){
        productName.setEnabled(true);
//        productCode.setEnabled(true);
        productPrice.setEnabled(true);
        productQty.setEnabled(false);

    }
    //? Set product Quantity
    private void setTextFieldProductQty(String text){
        productQty.setText(text);
    }

    //? Enable buttons menu
    private void enableButtonsMenu(){
        find_product.setEnabled(true);
        deleteProduct.setEnabled(true);
        extractInventory.setEnabled(true);
        insertInventory.setEnabled(true);
        deleteProduct.setEnabled(true);
        generateReport.setEnabled(true);
    }
    //? Enable text fields
    private void enableTextFields(){
//        productCode.setEnabled(true);
        productName.setEnabled(true);
        productPrice.setEnabled(true);
    }
    //? Hide update buttons
    private void hideButtonsEdit(){
        saveExtracInsertBtn.setVisible(false);
        cancelExtractInsertbtn.setVisible(false);
    }

    //? Show Edit buttons
    private void showButtonsEdit(){
        saveExtracInsertBtn.setVisible(true);
        cancelExtractInsertbtn.setVisible(true);
    }
    private void find_productActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_find_productActionPerformed
        String product_name = productName.getText();
        int product_qty = 0;
        String product_price = productPrice.getText();

        if(validations.isValidField(product_name)){
            JOptionPane.showMessageDialog(null, "El nombre no puede estar vacio");
            return;
        }

        if(validations.isValidField(product_price)){
            JOptionPane.showMessageDialog(null, "El Precio no puede estar vacio");
            return;
        }

        if(Integer.parseInt(product_price) <= 0){
            JOptionPane.showMessageDialog(null, "El Precio debe ser mayor a 0");
            return;
        }

        int saved = qr.insertNewProductDb(product_name, product_qty, Float.parseFloat(product_price), user_loggedin_id);

        if(saved == 1){
            JOptionPane.showMessageDialog(null, "Producto guardado correctamente ");
            //! Resetear la tabla para tener los datos mas recientes
            model.getDataVector().removeAllElements();
            cantidad_total = 0;
            loadInitialData(user_loggedin_id);
            //* Resetear todos los valores
//            productCode.setText("");
            productName.setText("");
            productPrice.setText("");
        }else {
            JOptionPane.showMessageDialog(null, "Oops, Algo salio mal, intentalo de nuevo mas tarde");

        }

    }//GEN-LAST:event_find_productActionPerformed

    private void cancelExtractInsertbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelExtractInsertbtnActionPerformed
        product_found = null;
        product_code_to_find = "";
        productName.setText("");
        productPrice.setText("");
        productQty.setText("0");
        //* Enable the quantity
        productQty.setEnabled(false);
        //* Leave read only values
        productName.setEnabled(true);
        productPrice.setEnabled(true);

        //* Enable the buttons if there is a product to extract
        saveExtracInsertBtn.setVisible(false);
        cancelExtractInsertbtn.setVisible(false);

        //* Disable all other buttons
        find_product.setEnabled(true);
        deleteProduct.setEnabled(true);
        extractInventory.setEnabled(true);
        insertInventory.setEnabled(true);
        deleteProduct.setEnabled(true);
        generateReport.setEnabled(true);
        quantityLabel.setText("CANTIDAD PRODUCTO:");

    }//GEN-LAST:event_cancelExtractInsertbtnActionPerformed

    private void saveExtracInsertBtnActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_saveExtracInsertBtnActionPerformed
        int updated = 3;
        String btn_button_text = evt.getActionCommand();
        String new_amount_to_update = productQty.getText();
        int amount = 0;

        if(new_amount_to_update.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor ingresa algun dato");
            return;
        }

        if(btn_button_text.equals("Insertar")){
            if( Integer.parseInt(new_amount_to_update) <= 0){
                JOptionPane.showMessageDialog(null, "La cantidad debe ser positiva");
                return;
            }
            amount = cantidad_producto_to_update + Integer.parseInt(new_amount_to_update);
        }

        if( btn_button_text.equals("Continuar")){
            if( Integer.parseInt(new_amount_to_update) > cantidad_producto_to_update){
                JOptionPane.showMessageDialog(null, "Cantidad insuficiente en el inventario");
            }else {
                amount = cantidad_producto_to_update - Integer.parseInt(new_amount_to_update);
                InvoiceForm invoiceForm = new InvoiceForm(id_product_to_generate_invoice, user_loggedin_id, amount);
                invoiceForm.setVisible(true);

                invoiceForm.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                        // https://www.youtube.com/playlist?list=PLz3sH_KSH-y_hyudbNhHk3Egdsn9Zj5SJ
                        //* Hide the buttons
                        hideButtonsEdit();
                        //* Reset the values
                        productName.setText("");
                        productQty.setText("0");
                        productQty.setEnabled(false);
                        productPrice.setText("");
                        //? habilitar los campos
                        enableTextFields();
                        //? habilitar los botones
                        enableButtonsMenu();

                        //? Clear the table
                        model.getDataVector().removeAllElements();
                        try {
                            loadInitialData(user_loggedin_id);
                        } catch (SQLException e) {
                            throw new RuntimeException(e);
                        }
                    }
                });
            }
        }

        if(btn_button_text.equals("Insertar")){
            updated = qr.updateRecordOnDb(amount, user_loggedin_id, product_code_to_update);
        }
//        int updated = 10;
        if(updated == 1){
            if(btn_button_text.equals("Insertar")){
                cantidad_total = 0;
                JOptionPane.showMessageDialog(null, "Producto Actaulizado correctamente");
            }

            //* Hide the buttons
            hideButtonsEdit();
            //* Reset the values
//            productCode.setText("");
            productName.setText("");
            productQty.setText("0");
            productQty.setEnabled(false);
            productPrice.setText("");
            //? habilitar los campos
            enableTextFields();
            //? habilitar los botones
            enableButtonsMenu();

            //? Clear the table
            model.getDataVector().removeAllElements();
            loadInitialData(user_loggedin_id);
        }else if(updated == 0 ) {
            JOptionPane.showMessageDialog(null, "Oops, algo no salio como lo esperabamos");
        }
    }//GEN-LAST:event_saveExtracInsertBtnActionPerformed

    private void insertInventoryActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_insertInventoryActionPerformed
        ResultSet tempProductFound = null;
        String tempProductCode = "";
        //* producto
        String product_name = "";
        float unit_price = 0;
        product_code_to_find = JOptionPane.showInputDialog("Ingrese el codigo del producto a Insertar.");

        if(product_code_to_find.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor ingrese un codigo a buscar");
            return;
        }

        if(!product_code_to_find.isEmpty()){
            tempProductFound = qr.getSingleProductFromDb(product_code_to_find, user_loggedin_id);
        }

        if(tempProductFound != null){
            while (tempProductFound.next()){
                tempProductCode = tempProductFound.getString(1);
                product_code_to_update = tempProductFound.getString(1);
                product_name = tempProductFound.getString(2);
                cantidad_producto_to_update = Integer.parseInt(tempProductFound.getString(3));
                unit_price = Float.parseFloat(tempProductFound.getString(4));
            }
        }

        if(tempProductCode.isEmpty()){
            JOptionPane.showMessageDialog(null, "Producto no encontrado o codigo invalido");
        }else {
            saveExtracInsertBtn.setText("Insertar");
            enableElements(tempProductCode, product_name, unit_price);
            //? Set the text to the original data
            setTextFieldProductQty("");

            disableMenuButtons("CANTIDAD A INSERTAR:");

            showButtonsEdit();

            updateAndExtractFields();
        }

        //TODO: https://www.vogella.com/tutorials/JavaPDF/article.html //* muuuuuuuy util
    }//GEN-LAST:event_insertInventoryActionPerformed

    private void deleteProductActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_deleteProductActionPerformed
        String product_code_to_find = JOptionPane.showInputDialog("Ingrese el codigo del producto a eliminar.");
        ResultSet product_found = null;
        String local_code_to_delete = "";
        if(product_code_to_find == null) return;
        try {
            product_found = qr.getSingleProductFromDb(product_code_to_find, user_loggedin_id);
        }catch (SQLException e){
            System.out.println(e+"Al eliminar");
        }

        //* producto
        String product_name = "";
        if(product_found != null ){
            while (product_found.next()){
                local_code_to_delete = product_found.getString(1);
                product_name = product_found.getString(2);
                cantidad_producto_to_update = Integer.parseInt(product_found.getString(3));
            }
        }
        if(local_code_to_delete.isEmpty()){
            JOptionPane.showMessageDialog(null, "Codigo invalido, o producto no encontrado ");
        }else {
            int decision = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar: "+product_name+"\nCon codigo "+local_code_to_delete+" ?\n"+"Una vez eliminado, no se podra recuperar", "Selecciona una Opcion", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
            if(decision == 0){
                int result = qr.deleteRecordFromDb(local_code_to_delete, user_loggedin_id);
                if(result == 1){
                    cantidad_total = 0;
                    model.getDataVector().removeAllElements();
                    loadInitialData(user_loggedin_id);
                    JOptionPane.showMessageDialog(null, "Producto eliminado correctamente");
                }
            }
        }
    }//GEN-LAST:event_deleteProductActionPerformed

    private void generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportActionPerformed
        String filePathToSave = generateNamePath.generatePathToSaveInfo("Inventario", desktopPath);
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(filePathToSave));
//            ResultSet inventory = qr.getAllDataFromDb(user_loggedin_id);
            ResultSet inventory = qr.getAllDataFromDb(user_loggedin_id);
            document.open();
            pdfReport.addTitlePage(document, full_user_name, Integer.parseInt(isSuperAdmin));

            pdfReport.createContentTable(document, inventory);
            // agregar datos de tabla
            document.close();
            JOptionPane.showMessageDialog(null, "El reporte se genero correctamente");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Algo salio mal al generar el reporte");
            e.printStackTrace();
        }
    }//GEN-LAST:event_generateReportActionPerformed

    private void find_product1ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_find_product1ActionPerformed
        Login login = new Login();
        login.show();
        dispose();
    }//GEN-LAST:event_find_product1ActionPerformed

    private void search_productActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_search_productActionPerformed

        ResultSet producto = null;
        String codigo_proudcto = "", nombre_producto = "", cantidad_producto = "", precio_producto = "";
        String codigo = JOptionPane.showInputDialog("Ingresa el codigo del producto a buscar");
        if(codigo.isEmpty()){
            JOptionPane.showMessageDialog(null, "Pora buscar ingresa algun codigo");
        }else {

            try {
                producto = qr.getSingleProductDb(codigo, user_loggedin_id);
            }catch (SQLException e){
                System.out.println(e+"no se pudo encontrar tu producto");
            }

            if(producto != null){
                while (producto.next()){
                    codigo_proudcto = producto.getString(1);
                    nombre_producto = producto.getString(2);
                    cantidad_producto = producto.getString(3);
                    precio_producto = producto.getString(4);
                }
            }else {
                System.out.println(codigo_proudcto+" hay algo");
            }

            if(!codigo_proudcto.isEmpty()){
                JOptionPane.showMessageDialog(null, "Producto: "+nombre_producto+"\nCon codigo: "+codigo_proudcto+"\nTiene una existencia de: "+cantidad_producto+"\nCon un precio unitario: "+precio_producto+"         ");
            }else {
                JOptionPane.showMessageDialog(null, "Producto no encontrado con codigo: "+ codigo);
            }
        }
    }//GEN-LAST:event_search_productActionPerformed

//    static BufferedImage addImage = null, deleteImage = null, extractImage = null, insertImage = null, reportImage = null, logoImage = null ;
//
//    public void getImages(){
//        try {
//
//            URL logImageUrl = new URL("./assets/logo.png");
//            addImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/agregar.png")));
//            deleteImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/deleteIcon.png")));
//            reportImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/report.png")));
//            insertImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/ingreso1.png")));
//            extractImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/extraer.png")));
//            logoImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/logo.png")));
//        }catch ( IOException e){
//            System.out.println("No images loaded");
//        }
//    }

    /**
     * @param args the command line arguments
     */
    public void main(String[] args) throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new UI(user_loggedin_id).setVisible(true);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }

    public void loadInitialData(int userId ) throws SQLException {
        NumberFormat formatter = NumberFormat.getCurrencyInstance();
        ResultSet inventory = qr.getAllDataFromDb(userId);
        Object[] inventoryList = new Object[6];
        model = (DefaultTableModel) tableContent.getModel();
        productQty.setEnabled(false);
        while (inventory.next()){
            String codigo_producto = inventory.getString(1);
            String nombre_producto = inventory.getString(2);
            int cantidad_producto = Integer.parseInt(inventory.getString(3));
            float precio = Float.parseFloat(inventory.getString(4));
            String date = inventory.getString(5);
            unidadades_totales += cantidad_producto;
            cantidad_total += (cantidad_producto * precio);
            inventoryList[0] = codigo_producto;
            inventoryList[1] = nombre_producto;
            inventoryList[2] = cantidad_producto;
            inventoryList[3] = formatter.format(precio);
            inventoryList[4] = formatter.format((cantidad_producto * precio));
            inventoryList[5] = date;

            model.addRow(inventoryList);
        }
        tableContent.setModel(model);
        String moneyString = formatter.format(cantidad_total);
        totalAmount.setText(moneyString);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelExtractInsertbtn;
    private javax.swing.JButton deleteProduct;
    private javax.swing.JButton extractInventory;
    private javax.swing.JButton find_product;
    private javax.swing.JButton find_product1;
    private javax.swing.JButton generateReport;
    private javax.swing.JButton insertInventory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField productName;
    private javax.swing.JTextField productPrice;
    private javax.swing.JTextField productQty;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JButton saveExtracInsertBtn;
    private javax.swing.JButton search_product;
    private javax.swing.JTable tableContent;
    private javax.swing.JLabel totalAmount;
    private javax.swing.JLabel user_info_loggedin;
    // End of variables declaration//GEN-END:variables
}
