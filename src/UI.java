/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import Utils.PdfReport;
import Utils.Queries;
import Utils.Validations;
import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfWriter;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Objects;
import java.util.Random;

/**
 *
 * @author Jaime Tuyuc
 */
public class UI extends javax.swing.JFrame {

    DefaultTableModel model;

    //* Queries
    Queries qr = new Queries();

    //* Validations
    Validations validations = new Validations();

    //* PDF report
    PdfReport pdfReport = new PdfReport();

    //* Global variables
    float cantidad_total = 0;
    int unidadades_totales = 0;
    String codigo_producto_to_update = "";
    int cantidad_producto_to_update = 0;

    String product_code_to_find = "";

    //? Producto a actualizar
    ResultSet product_found = null;

    String desktopPath = System.getProperty("user.home") + File.separator +"Desktop";

    /**
     * Creates new form UI
     */
    public UI() throws SQLException {
        initComponents();
        loadInitialData();
        saveExtracInsertBtn.setVisible(false);
        cancelExtractInsertbtn.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        quantityLabel = new javax.swing.JLabel();
        productQty = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        productName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        productCode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        productPrice = new javax.swing.JTextField();
        saveExtracInsertBtn = new javax.swing.JButton();
        cancelExtractInsertbtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        extractInventory = new javax.swing.JButton();
        insertInventory = new javax.swing.JButton();
        newProductInventory = new javax.swing.JButton();
        deleteProduct = new javax.swing.JButton();
        generateReport = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableContent = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        totalAmount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(151, 7, 240));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(logoImage)); // NOI18N
        jLabel1.setText("DRIVE X PORT");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        quantityLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        quantityLabel.setText("CANTIDAD PRODUCTO:");

        productQty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productQty.setText("0");
        productQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productQtyActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("CODIGO PRODUCTO:");

        productName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("NOMBRE PRODUCTO:");

        productCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productCodeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("PRECIO PRODUCTO:");

        productPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productPriceActionPerformed(evt);
            }
        });

        saveExtracInsertBtn.setBackground(new java.awt.Color(13, 110, 253));
        saveExtracInsertBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveExtracInsertBtn.setText("Guardar");
        saveExtracInsertBtn.setToolTipText("Extrae o inserta para habilitar");
        saveExtracInsertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    saveExtracInsertBtnActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        cancelExtractInsertbtn.setForeground(new java.awt.Color(0, 0, 255));
        cancelExtractInsertbtn.setText("Cancelar");
        cancelExtractInsertbtn.setToolTipText("Extrae o inserta para habilitar");
        cancelExtractInsertbtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        cancelExtractInsertbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelExtractInsertbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(productCode, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(quantityLabel)
                            .addGap(63, 63, 63)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(productQty, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveExtracInsertBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelExtractInsertbtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(153, 153, 153))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(productCode, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityLabel)
                            .addComponent(productQty, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(saveExtracInsertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelExtractInsertbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        extractInventory.setBackground(new java.awt.Color(255, 165, 0));
        extractInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        extractInventory.setIcon(new javax.swing.ImageIcon(extractImage)); // NOI18N
        extractInventory.setText("EXTRAER INVENTARIO");
        extractInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    extractInventoryActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        insertInventory.setBackground(new java.awt.Color(0, 0, 255));
        insertInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        insertInventory.setForeground(new java.awt.Color(204, 204, 204));
        insertInventory.setIcon(new javax.swing.ImageIcon(insertImage)); // NOI18N
        insertInventory.setText("iNGRESAR INVENTARIO");
        insertInventory.setPreferredSize(new java.awt.Dimension(240, 39));
        insertInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    insertInventoryActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        newProductInventory.setBackground(new java.awt.Color(93, 190, 163));
        newProductInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        newProductInventory.setIcon(new javax.swing.ImageIcon(addImage)); // NOI18N
        newProductInventory.setText("NUEVO PRODUCTO");
        newProductInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    newProductInventoryActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        deleteProduct.setBackground(new java.awt.Color(255, 0, 0));
        deleteProduct.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteProduct.setIcon(new javax.swing.ImageIcon(deleteImage)); // NOI18N
        deleteProduct.setText("ELIMINAR PRODUCTO");
        deleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    deleteProductActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        generateReport.setBackground(new java.awt.Color(255, 87, 51));
        generateReport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateReport.setIcon(new javax.swing.ImageIcon(reportImage)); // NOI18N
        generateReport.setText("GENEAR REPORTE");
        generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extractInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(122, 122, 122)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(insertInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newProductInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(deleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extractInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newProductInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inventario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tableContent.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tableContent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Producto", "Nombre Producto", "Existencia", "Precio Unitario", "Total", "Modificacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableContent.setGridColor(new java.awt.Color(153, 153, 153));
        tableContent.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableContent);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Gran Total");

        totalAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        totalAmount.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalAmount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(452, 452, 452)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productQtyActionPerformed

    private void productCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productCodeActionPerformed

    private void productPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productPriceActionPerformed

    private void extractInventoryActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_extractInventoryActionPerformed
        ResultSet tempProductFound = null;
        String tempProductCode = "";
        //* producto
        String product_name = "";
        float unit_price = 0;
        product_code_to_find = JOptionPane.showInputDialog("Ingrese el codigo del producto a extraer.");

        if(product_code_to_find.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor ingrese un codigo a buscar");
            return;
        }

        if(!product_code_to_find.isEmpty()){
            tempProductFound = qr.getSingleProductFromDb(product_code_to_find);
        }

        if(tempProductFound != null){
            while (tempProductFound.next()){
                tempProductCode = tempProductFound.getString(1);
                product_name = tempProductFound.getString(2);
                cantidad_producto_to_update = Integer.parseInt(tempProductFound.getString(3));
                unit_price = Float.parseFloat(tempProductFound.getString(4));
            }
        }

        if(tempProductCode.isEmpty()){
            JOptionPane.showMessageDialog(null, "Producto no encontrado o codigo invalido");
        }else {
            saveExtracInsertBtn.setText("Extraer");
                enableElements(tempProductCode, product_name, unit_price);
                //? Set the text to the original data
                setTextFieldProductQty("");

                disableMenuButtons("CANTIDAD A EXTRAER:");

                showButtonsEdit();

                updateAndExtractFields();
        }
        //TODO: manejar el evento de cancel en JOPane
    }

    //* Enable function
    private void enableElements(String codigo_producto_to_update, String product_name, Float unit_price){
        productCode.setText(codigo_producto_to_update);
        productName.setText(product_name);
        productPrice.setText(String.valueOf(unit_price));
    }

    private void updateAndExtractFields(){
        //* Enable the quantity
        productQty.setEnabled(true);
        //* Leave read only values
        productName.setEnabled(false);
        productCode.setEnabled(false);
        productPrice.setEnabled(false);
    }

    //? Disable menu buttons
    private void disableMenuButtons(String msg_toShow){
        newProductInventory.setEnabled(false);
        deleteProduct.setEnabled(false);
        extractInventory.setEnabled(false);
        insertInventory.setEnabled(false);
        deleteProduct.setEnabled(false);
        generateReport.setEnabled(false);
        quantityLabel.setText(msg_toShow);
    }

    //*Disable function
    private void disableElements(){
        productName.setEnabled(true);
        productCode.setEnabled(true);
        productPrice.setEnabled(true);
        productQty.setEnabled(false);

    }
    //? Set product Quantity
    private void setTextFieldProductQty(String text){
        productQty.setText(text);
    }

    //? Enable buttons menu
    private void enableButtonsMenu(){
        newProductInventory.setEnabled(true);
        deleteProduct.setEnabled(true);
        extractInventory.setEnabled(true);
        insertInventory.setEnabled(true);
        deleteProduct.setEnabled(true);
        generateReport.setEnabled(true);
    }
    //? Enable text fields
    private void enableTextFields(){
        productCode.setEnabled(true);
        productName.setEnabled(true);
        productPrice.setEnabled(true);
    }
    //? Hide update buttons
    private void hideButtonsEdit(){
        saveExtracInsertBtn.setVisible(false);
        cancelExtractInsertbtn.setVisible(false);
    }

    //? Show Edit buttons
    private void showButtonsEdit(){
        saveExtracInsertBtn.setVisible(true);
        cancelExtractInsertbtn.setVisible(true);
    }
    private void newProductInventoryActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_newProductInventoryActionPerformed
        String single_product_code;
        String product_code = productCode.getText();
        String product_name = productName.getText();
        int product_qty = 0;
        String product_price = productPrice.getText();

        if(validations.isValidField(product_code)){
            JOptionPane.showMessageDialog(null, "El codigo no puede estar vacio");
            return;
        }

        if(validations.isValidField(product_name)){
            JOptionPane.showMessageDialog(null, "El nombre no puede estar vacio");
            return;
        }

        if(validations.isValidField(product_price)){
            JOptionPane.showMessageDialog(null, "El Precio no puede estar vacio");
            return;
        }

        if(Integer.parseInt(product_price) <= 0){
            JOptionPane.showMessageDialog(null, "El Precio debe ser mayor a 0");
            return;
        }

        //* Validar si ya existe el producto
        single_product_code = qr.getSingleProductDb(product_code);
        if(Objects.equals(single_product_code, product_code)){
            JOptionPane.showMessageDialog(null, "El codigo ya existe, ingresa uno nuevo");
        }

        int saved = qr.insertNewProductDb(product_code, product_name, product_qty, Float.parseFloat(product_price));

        if(saved == 1){
            JOptionPane.showMessageDialog(null, "Producto guardado correctamente ");
            //! Resetear la tabla para tener los datos mas recientes
            model.getDataVector().removeAllElements();
            cantidad_total = 0;
            loadInitialData();
            //* Resetear todos los valores
            productCode.setText("");
            productName.setText("");
            productPrice.setText("");
        }else {
            JOptionPane.showMessageDialog(null, "Oops, Algo salio mal, intentalo de nuevo mas tarde");

        }

    }//GEN-LAST:event_newProductInventoryActionPerformed

    private void cancelExtractInsertbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelExtractInsertbtnActionPerformed
        product_found = null;
        product_code_to_find = "";
        productCode.setText("");
        productName.setText("");
        productPrice.setText("");
        productQty.setText("0");
        //* Enable the quantity
        productQty.setEnabled(false);
        //* Leave read only values
        productName.setEnabled(true);
        productCode.setEnabled(true);
        productPrice.setEnabled(true);

        //* Enable the buttons if there is a product to extract
        saveExtracInsertBtn.setVisible(false);
        cancelExtractInsertbtn.setVisible(false);

        //* Disable all other buttons
        newProductInventory.setEnabled(true);
        deleteProduct.setEnabled(true);
        extractInventory.setEnabled(true);
        insertInventory.setEnabled(true);
        deleteProduct.setEnabled(true);
        generateReport.setEnabled(true);
        quantityLabel.setText("CANTIDAD PRODUCTO:");

    }//GEN-LAST:event_cancelExtractInsertbtnActionPerformed

    private void saveExtracInsertBtnActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_saveExtracInsertBtnActionPerformed
        String localCodeToUpdate = productCode.getText();
        String btn_button_text = evt.getActionCommand();
        String new_amount_to_update = productQty.getText();
        int amount = 0;

        if(new_amount_to_update.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor ingresa algun dato");
            return;
        }

        if(btn_button_text.equals("Insertar")){
            // Agregar cantidad
            if( Integer.parseInt(new_amount_to_update) <= 0){
                JOptionPane.showMessageDialog(null, "La cantidad debe ser positiva");
                return;
            }
            amount = cantidad_producto_to_update + Integer.parseInt(new_amount_to_update);
        }

        if( btn_button_text.equals("Extraer")){
            if( Integer.parseInt(new_amount_to_update) > cantidad_producto_to_update){
                JOptionPane.showMessageDialog(null, "Cantidad insuficiente en el inventario");
                return;
            }
            amount = cantidad_producto_to_update - Integer.parseInt(new_amount_to_update);
        }

        int updated = qr.updateRecordOnDb(localCodeToUpdate, amount);
        if(updated == 1){
            if(btn_button_text.equals("Insertar")){
                cantidad_total = 0;
                JOptionPane.showMessageDialog(null, "Producto Actaulizado correctamente");
            }

            if(btn_button_text.equals("Extraer")){
                cantidad_total = 0;
                JOptionPane.showMessageDialog(null, "Producto extraido correctamente");
            }

            //* Hide the buttons
            hideButtonsEdit();
            //* Reset the values
            productCode.setText("");
            productName.setText("");
            productQty.setText("0");
            productQty.setEnabled(false);
            productPrice.setText("");
            //? habilitar los campos
            enableTextFields();
            //? habilitar los botones
            enableButtonsMenu();

            //? Clear the table
            model.getDataVector().removeAllElements();
            loadInitialData();
        }else {
            JOptionPane.showMessageDialog(null, "Oops, algo no salio como lo esperabamos");
        }
    }//GEN-LAST:event_saveExtracInsertBtnActionPerformed

    private void insertInventoryActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_insertInventoryActionPerformed
        ResultSet tempProductFound = null;
        String tempProductCode = "";
        //* producto
        String product_name = "";
        float unit_price = 0;
        product_code_to_find = JOptionPane.showInputDialog("Ingrese el codigo del producto a Insertar.");

        if(product_code_to_find.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor ingrese un codigo a buscar");
            return;
        }

        if(!product_code_to_find.isEmpty()){
            tempProductFound = qr.getSingleProductFromDb(product_code_to_find);
        }

        if(tempProductFound != null){
            while (tempProductFound.next()){
                tempProductCode = tempProductFound.getString(1);
                product_name = tempProductFound.getString(2);
                cantidad_producto_to_update = Integer.parseInt(tempProductFound.getString(3));
                unit_price = Float.parseFloat(tempProductFound.getString(4));
            }
        }

        if(tempProductCode.isEmpty()){
            JOptionPane.showMessageDialog(null, "Producto no encontrado o codigo invalido");
        }else {
            saveExtracInsertBtn.setText("Insertar");
            enableElements(tempProductCode, product_name, unit_price);
            //? Set the text to the original data
            setTextFieldProductQty("");

            disableMenuButtons("CANTIDAD A INSERTAR:");

            showButtonsEdit();

            updateAndExtractFields();
        }

        //TODO: https://www.vogella.com/tutorials/JavaPDF/article.html //* muuuuuuuy util
    }//GEN-LAST:event_insertInventoryActionPerformed

    private void deleteProductActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_deleteProductActionPerformed
        String product_code_to_find = JOptionPane.showInputDialog("Ingrese el codigo del producto a eliminar.");
        if(product_code_to_find == null) return;
        ResultSet product_found = qr.getSingleProductFromDb(product_code_to_find);

        //* producto
        String product_name = "";
        if(product_found != null ){
            while (product_found.next()){
                codigo_producto_to_update = product_found.getString(1);
                product_name = product_found.getString(2);
                cantidad_producto_to_update = Integer.parseInt(product_found.getString(3));
            }
            int decision = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar: "+product_name+"\nCon codigo "+codigo_producto_to_update+" ?\n"+"Una vez eliminado, no se podra recuperar", "Selecciona una Opcion", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
            if(decision == 0){
                int result = qr.deleteRecordFromDb(codigo_producto_to_update);
                if(result == 1){
                    cantidad_total = 0;
                    model.getDataVector().removeAllElements();
                    loadInitialData();
                    JOptionPane.showMessageDialog(null, "Producto eliminado correctamente");
                }
            }

        }

        if(codigo_producto_to_update.isEmpty()){

            JOptionPane.showMessageDialog(null, "Codigo invalido, o producto no encontrado ");
        }
    }//GEN-LAST:event_deleteProductActionPerformed

    private void generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportActionPerformed
        Random random = new Random();
        LocalDateTime myDateObj = LocalDateTime.now();
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String formattedDate = myDateObj.format(myFormatObj);
        String uniqueId = String.format("%04d", random.nextInt(1000));
        String filePathToSave = desktopPath + "/" + "Inventario"+"-"+formattedDate.replace("/","-") + "-" + uniqueId+ ".pdf";
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(filePathToSave));
            ResultSet inventory = qr.getAllDataFromDb();
            document.open();
            pdfReport.addTitlePage(document);

            pdfReport.createContentTable(document, inventory);
            // agregar datos de tabla
            document.close();
            JOptionPane.showMessageDialog(null, "El reporte se genero correctamente");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Algo salio mal al generar el reporte");
            e.printStackTrace();
        }
    }//GEN-LAST:event_generateReportActionPerformed

    static BufferedImage addImage = null, deleteImage = null, extractImage = null, insertImage = null, reportImage = null, logoImage = null ;

    public static void getImages(){
        try {
            addImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/agregar.png")));
            deleteImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/deleteIcon.png")));
            reportImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/report.png")));
            insertImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/ingreso1.png")));
            extractImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/extraer.png")));
            logoImage = ImageIO.read(Objects.requireNonNull(UI.class.getResource("./assets/logo.png")));
        }catch ( IOException e){
            System.out.println("No images loaded");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        getImages();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new UI().setVisible(true);
//                    productQty.isEditable();
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }

    public void loadInitialData() throws SQLException {
        NumberFormat formatter = NumberFormat.getCurrencyInstance();
        ResultSet inventory = qr.getAllDataFromDb();
        Object[] inventoryList = new Object[6];
        model = (DefaultTableModel) tableContent.getModel();
        productQty.setEnabled(false);
        while (inventory.next()){
            String codigo_producto = inventory.getString(1);
            String nombre_producto = inventory.getString(2);
            int cantidad_producto = Integer.parseInt(inventory.getString(3));
            float precio = Float.parseFloat(inventory.getString(4));
            String date = inventory.getString(5);
            unidadades_totales += cantidad_producto;
            cantidad_total += (cantidad_producto * precio);
            inventoryList[0] = codigo_producto;
            inventoryList[1] = nombre_producto;
            inventoryList[2] = cantidad_producto;
            inventoryList[3] = precio;
            inventoryList[4] = (cantidad_producto * precio);
            inventoryList[5] = date;

            model.addRow(inventoryList);
        }
        tableContent.setModel(model);
        String moneyString = formatter.format(cantidad_total);
        totalAmount.setText(moneyString);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelExtractInsertbtn;
    private javax.swing.JButton deleteProduct;
    private javax.swing.JButton extractInventory;
    private javax.swing.JButton generateReport;
    private javax.swing.JButton insertInventory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newProductInventory;
    private javax.swing.JTextField productCode;
    private javax.swing.JTextField productName;
    private javax.swing.JTextField productPrice;
    private javax.swing.JTextField productQty;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JButton saveExtracInsertBtn;
    private javax.swing.JTable tableContent;
    private javax.swing.JLabel totalAmount;
    // End of variables declaration//GEN-END:variables
}
